// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package iam

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IamClient is the client API for Iam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IamClient interface {
	WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error)
}

type iamClient struct {
	cc grpc.ClientConnInterface
}

func NewIamClient(cc grpc.ClientConnInterface) IamClient {
	return &iamClient{cc}
}

func (c *iamClient) WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error) {
	out := new(WhoAmIResponse)
	err := c.cc.Invoke(ctx, "/proto.iam.v1.Iam/WhoAmI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IamServer is the server API for Iam service.
// All implementations must embed UnimplementedIamServer
// for forward compatibility
type IamServer interface {
	WhoAmI(context.Context, *WhoAmIRequest) (*WhoAmIResponse, error)
	mustEmbedUnimplementedIamServer()
}

// UnimplementedIamServer must be embedded to have forward compatible implementations.
type UnimplementedIamServer struct {
}

func (UnimplementedIamServer) WhoAmI(context.Context, *WhoAmIRequest) (*WhoAmIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (UnimplementedIamServer) mustEmbedUnimplementedIamServer() {}

// UnsafeIamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IamServer will
// result in compilation errors.
type UnsafeIamServer interface {
	mustEmbedUnimplementedIamServer()
}

func RegisterIamServer(s grpc.ServiceRegistrar, srv IamServer) {
	s.RegisterService(&Iam_ServiceDesc, srv)
}

func _Iam_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoAmIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.iam.v1.Iam/WhoAmI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).WhoAmI(ctx, req.(*WhoAmIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Iam_ServiceDesc is the grpc.ServiceDesc for Iam service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Iam_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.iam.v1.Iam",
	HandlerType: (*IamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhoAmI",
			Handler:    _Iam_WhoAmI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iam/v1/iam.proto",
}
